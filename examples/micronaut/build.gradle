import io.micronaut.gradle.MicronautRuntime

plugins {
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"

    id("io.micronaut.minimal.application") version "3.3.2"

    id("nu.studer.jooq") version "7.1.1"
}

repositories {
    mavenLocal()
    mavenCentral()
}

description = "Micronaut CRooD Example"
version = "1.0-SNAPSHOT"
group = "xyz.chrisime"

dependencies {
    implementation(platform("io.micronaut:micronaut-bom:${micronautVersion}"))
    kapt(platform("io.micronaut:micronaut-bom:${micronautVersion}"))

    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.sql:micronaut-jooq")

    implementation("xyz.chrisime:crood:${croodVersion}")

    implementation("io.micronaut.data:micronaut-data-tx")

    implementation("org.slf4j:slf4j-api:1.7.+")
    runtimeOnly("ch.qos.logback:logback-classic:1.2.+")

    runtimeOnly("org.postgresql:postgresql:42.3.+")
    runtimeOnly("io.micronaut.sql:micronaut-jdbc-hikari")

    compileOnly("jakarta.validation:jakarta.validation-api:3.0.0")

    jooqGenerator(project(":generator"))
    jooqGenerator("xyz.chrisime:crood:${croodVersion}")
}

tasks {
    allOpen {
        annotations("javax.transaction.Transactional", "io.micronaut.transaction.annotation.ReadOnly")
    }

    kapt {
        useBuildCache = false
        keepJavacAnnotationProcessors = true
    }

    micronaut {
        enableNativeImage(false)
            .version("${micronautVersion}")
            .runtime(MicronautRuntime.NETTY)
            .processing {
                it.incremental(true)
                    .module(project.name)
                    .group("${project.group}")
                    .annotations("xyz.chrisime.micronaut.*", "javax.transaction.Transactional")
            }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileKotlin {
        it.kotlinOptions {
            jvmTarget = sourceCompatibility
            apiVersion = "1.6"
            languageVersion = "1.6"

            freeCompilerArgs = [
                "-Xjsr305=strict",
                "-Xstrict-java-nullability-assertions",
                "-opt-in=kotlin.RequiresOptIn"
            ]
        }

        dependsOn("generateJooq")
    }

    application {
        mainClass.set("xyz.chrisime.micronaut.ApplicationKt")
    }

    jooq {
        version = "${jooqVersion}"
        configurations {
            create("main") {
                generateSchemaSourceOnCompilation = false

                generationTool {
                    logging = org.jooq.meta.jaxb.Logging.WARN
                    generator {
                        name = "xyz.chrisime.crood.codegen.KDomainGenerator"
                        strategy {
                            name = "xyz.chrisime.crood.codegen.DomainGeneratorStrategy"
                        }
                        database {
                            name = "xyz.chrisime.jooq.generator.StandalonePostgresDatabase"
                            inputSchema = "public"
                            recordVersionFields = "version"
                            excludes = "flyway_.*"
                        }
                        generate {
                            validationAnnotations = true
                            deprecated = false
                            records = true
                            immutablePojos = true
                            routines = true
                            globalObjectReferences = true
                            globalKeyReferences = true
                        }
                        target {
                            packageName = "xyz.chrisime.micronaut"
                            directory = "${project.buildDir}/generated/jooq"
                        }
                    }
                }
            }
        }
    }
}
